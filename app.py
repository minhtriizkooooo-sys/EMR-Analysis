# -*- coding: utf-8 -*-
# EMR Insight AI - Flask Application

import os
import io
import glob
import base64
import random
import re
import numpy as np
import pandas as pd
from PIL import Image
from flask import (
    Flask, flash, redirect, render_template,
    request, session, url_for, jsonify
)

# Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt cho m√¥ h√¨nh
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image

# --- Flask Setup ---
app = Flask(__name__)
# KHUY·∫æN NGH·ªä: ƒê·ªïi secret key khi deploy th·∫≠t
app.secret_key = os.urandom(24) 

# --- Model Config ---
MODEL_DIR = "models"
MODEL_FILENAME = "best_weights_model.keras"
MODEL_PATH = os.path.join(MODEL_DIR, MODEL_FILENAME)
IMAGE_SIZE = (224, 224) # K√≠ch th∆∞·ªõc ƒë·∫ßu v√†o chu·∫©n c·ªßa m√¥ h√¨nh (th∆∞·ªùng l√† 224x224 cho nhi·ªÅu CNN)

# --- Chu·∫©n b·ªã Th∆∞ m·ª•c v√† Gh√©p c√°c ph·∫ßn model ---
if not os.path.exists(MODEL_DIR):
    os.makedirs(MODEL_DIR)

def join_model_parts():
    """Gh√©p c√°c ph·∫ßn model ƒë√£ chia nh·ªè th√†nh file model ho√†n ch·ªânh."""
    if os.path.exists(MODEL_PATH):
        print(f"‚úÖ Model ƒë√£ t·ªìn t·∫°i: {MODEL_PATH}")
        return

    part_pattern = os.path.join(MODEL_DIR, "best_weights_model.keras.part*")
    model_parts = glob.glob(part_pattern)

    def extract_part_number(path):
        match = re.search(r'\.part(\d+)', path)
        return int(match.group(1)) if match else -1

    model_parts = sorted(model_parts, key=extract_part_number)

    if not model_parts:
        print("‚ùå Kh√¥ng t√¨m th·∫•y ph·∫ßn n√†o c·ªßa model.")
        return

    print(f"üîß ƒêang gh√©p {len(model_parts)} ph·∫ßn model...")
    try:
        with open(MODEL_PATH, "wb") as outfile:
            for part in model_parts:
                print(f"üß© Gh√©p: {part}")
                with open(part, "rb") as infile:
                    outfile.write(infile.read())
        print("‚úÖ Gh√©p model th√†nh c√¥ng: ", MODEL_PATH)
    except Exception as e:
        print(f"‚ùå L·ªói khi gh√©p model: {e}")

# G·ªçi gh√©p model n·∫øu c·∫ßn
join_model_parts()

# --- Load model ---
model = None
try:
    # Compile=False ƒë∆∞·ª£c s·ª≠ d·ª•ng v√¨ ch√∫ng ta ch·ªâ ƒëang load ƒë·ªÉ inference (d·ª± ƒëo√°n)
    model = load_model(MODEL_PATH, compile=False) 
    print("‚úÖ Model th·∫≠t ƒë√£ ƒë∆∞·ª£c load.")
except Exception as e:
    # Ghi l·∫°i l·ªói chi ti·∫øt khi load model
    print(f"‚ùå KH√îNG TH·ªÇ LOAD MODEL T·ª™ ƒê∆Ø·ªúNG D·∫™N: {MODEL_PATH}")
    print(f"Chi ti·∫øt l·ªói: {e}")
    model = None

# --- Helper Functions ---
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'bmp'}

def allowed_file(filename):
    """Ki·ªÉm tra ƒë·ªãnh d·∫°ng file ·∫£nh h·ª£p l·ªá."""
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def preprocess_image(file_stream):
    """Ti·ªÅn x·ª≠ l√Ω ·∫£nh cho m√¥ h√¨nh d·ª± ƒëo√°n Nodule Detection (Resize, Normalize)."""
    # load_img c·∫ßn m·ªôt file path ho·∫∑c stream
    img = image.load_img(file_stream, target_size=IMAGE_SIZE)
    # Chuy·ªÉn ƒë·ªïi sang array
    x = image.img_to_array(img)
    # Chu·∫©n h√≥a (normalize) v·ªÅ 0-1
    x = x / 255.0
    # Th√™m chi·ªÅu batch (batch dimension)
    x = np.expand_dims(x, axis=0)
    return x

# --- Routes ---

@app.route("/", methods=["GET"])
def index():
    return render_template("index.html")

@app.route("/login", methods=["POST"])
def login():
    username = request.form.get("userID")
    password = request.form.get("password")
    # Gi·ªØ nguy√™n logic ƒëƒÉng nh·∫≠p demo
    if username == "user_demo" and password == "Test@123456":
        session['user'] = username
        return redirect(url_for("dashboard"))
    else:
        flash("Sai ID ho·∫∑c m·∫≠t kh·∫©u.", "danger") 
        return redirect(url_for("index"))

@app.route("/dashboard")
def dashboard():
    if 'user' not in session:
        flash("Vui l√≤ng ƒëƒÉng nh·∫≠p.", "danger")
        return redirect(url_for("index"))
    # Truy·ªÅn tr·∫°ng th√°i model ƒë·ªÉ template c√≥ th·ªÉ hi·ªÉn th·ªã c·∫£nh b√°o
    return render_template("dashboard.html", model_ready=(model is not None))

@app.route("/emr_profile", methods=["GET", "POST"])
def emr_profile():
    if 'user' not in session:
        flash("Vui l√≤ng ƒëƒÉng nh·∫≠p.", "danger")
        return redirect(url_for("index"))

    summary = None
    filename = None

    if request.method == "POST":
        file = request.files.get('file')
        # ... (Gi·ªØ nguy√™n logic x·ª≠ l√Ω file CSV/Excel) ...
        if not file or file.filename == '':
            flash("Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn.", "danger")
            return render_template('emr_profile.html', summary=None)

        filename = file.filename
        try:
            file_stream = io.BytesIO(file.read())
            if filename.lower().endswith('.csv'):
                df = pd.read_csv(file_stream)
            elif filename.lower().endswith(('.xls', '.xlsx')):
                df = pd.read_excel(file_stream)
            else:
                flash("Ch·ªâ h·ªó tr·ª£ file CSV ho·∫∑c Excel.", "danger")
                return render_template('emr_profile.html', summary=None)

            rows, cols = df.shape
            col_info = []
            for col in df.columns:
                dtype = str(df[col].dtype)
                missing = df[col].isnull().sum()
                unique = df[col].nunique()
                desc_stats = ""
                if pd.api.types.is_numeric_dtype(df[col]):
                    desc = df[col].describe()
                    desc_stats = f"Min: {desc['min']:.2f}, Max: {desc['max']:.2f}, Mean: {desc['mean']:.2f}, Std: {desc['std']:.2f}"
                col_info.append(f"""
                    <li><strong>{col}</strong> - Ki·ªÉu: {dtype}, Thi·∫øu: {missing}, Duy nh·∫•t: {unique}
                    {'<br> Th·ªëng k√™: ' + desc_stats if desc_stats else ''}</li>
                """)

            info = f"<p><strong>S·ªë d√≤ng:</strong> {rows} | <strong>S·ªë c·ªôt:</strong> {cols}</p>"
            table_html = df.head().to_html(classes="table table-striped", index=False)
            summary = info + "<ul>" + "".join(col_info) + "</ul>" + "<h4>5 d√≤ng ƒë·∫ßu ti√™n:</h4>" + table_html
            flash(f"Ph√¢n t√≠ch file {filename} th√†nh c√¥ng!", "success") # Th√™m flash th√†nh c√¥ng

        except Exception as e:
            # Ghi log l·ªói v√† th√¥ng b√°o cho ng∆∞·ªùi d√πng
            print(f"L·ªói khi ph√¢n t√≠ch EMR: {e}") 
            summary = f"<p class='text-red-500'>L·ªói x·ª≠ l√Ω file: {e}</p>"
            flash("C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ph√¢n t√≠ch file.", "danger")

    return render_template("emr_profile.html", summary=summary, filename=filename)


@app.route("/emr_prediction", methods=["GET", "POST"])
def emr_prediction():
    if 'user' not in session:
        flash("Vui l√≤ng ƒëƒÉng nh·∫≠p.", "danger")
        return redirect(url_for("index"))

    prediction = None
    filename = None
    image_b64 = None

    if request.method == "POST":
        file = request.files.get('file')
        if not file or not allowed_file(file.filename):
            flash("Vui l√≤ng ch·ªçn file ·∫£nh h·ª£p l·ªá (JPG, PNG, GIF, BMP).", "danger")
            return redirect(url_for("emr_prediction"))

        filename = file.filename
        try:
            img_bytes = file.read()
            # M√£ h√≥a ·∫£nh ƒë·ªÉ hi·ªÉn th·ªã tr√™n web
            image_b64 = base64.b64encode(img_bytes).decode('utf-8')

            if model is None:
                # Th√¥ng b√°o model ch∆∞a s·∫µn s√†ng
                flash("Model ch∆∞a s·∫µn s√†ng. Vui l√≤ng ki·ªÉm tra log m√°y ch·ªß ƒë·ªÉ bi·∫øt chi ti·∫øt.", "danger")
                return render_template("emr_prediction.html", model_ready=False)

            # 1. Ti·ªÅn x·ª≠ l√Ω ·∫£nh
            x = preprocess_image(io.BytesIO(img_bytes)) 
            
            # 2. D·ª± ƒëo√°n v·ªõi m√¥ h√¨nh th·∫≠t
            preds = model.predict(x)
            
            # Gi·∫£ s·ª≠ m√¥ h√¨nh tr·∫£ v·ªÅ x√°c su·∫•t nh·ªã ph√¢n (x√°c su·∫•t c·ªßa l·ªõp '1' - Nodule)
            # preds[0][0] l√† x√°c su·∫•t c·ªßa l·ªõp Nodule
            score = preds[0][0] 

            # 3. Ph√¢n lo·∫°i v√† ƒë·ªãnh d·∫°ng k·∫øt qu·∫£
            THRESHOLD = 0.5
            
            if score >= THRESHOLD:
                # N·∫øu score >= 0.5, d·ª± ƒëo√°n l√† Nodule
                label = "Nodule"
                probability = score
            else:
                # N·∫øu score < 0.5, d·ª± ƒëo√°n l√† Non-nodule
                label = "Non-nodule"
                probability = 1.0 - score 
            
            prediction = {
                "result": label, 
                "probability": probability
            }
            
            # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            flash(f"D·ª± ƒëo√°n ho√†n t·∫•t: {label} - {probability:.2%}", "success")
            
        except Exception as e:
            # Ghi log l·ªói chi ti·∫øt khi x·∫£y ra l·ªói trong qu√° tr√¨nh d·ª± ƒëo√°n
            print(f"L·ªñI X·ª¨ L√ù ·∫¢NH HO·∫∂C D·ª∞ ƒêO√ÅN: {e}")
            flash(f"L·ªói x·ª≠ l√Ω ·∫£nh ho·∫∑c d·ª± ƒëo√°n: {e}", "danger")

    # Truy·ªÅn tr·∫°ng th√°i model ƒë·ªÉ template c√≥ th·ªÉ ki·ªÉm tra tr·∫°ng th√°i
    return render_template("emr_prediction.html", prediction=prediction, filename=filename, image_b64=image_b64, model_ready=(model is not None))

@app.route("/logout")
def logout():
    session.clear()
    flash("ƒê√£ ƒëƒÉng xu·∫•t.", "success")
    return redirect(url_for("index"))

# --- Run App ---
if __name__ == "__main__":
    app.run(debug=True)
