import os
import io
import base64
import random
import numpy as np
from PIL import Image
from flask import Flask, render_template, request, redirect, url_for, session, flash
from werkzeug.utils import secure_filename
from tensorflow.keras.models import load_model, Sequential
from tensorflow.keras.layers import Input, Flatten, Dense # C·∫ßn cho Dummy Model
from tensorflow.keras.preprocessing.image import img_to_array

# --- C·∫§U H√åNH ---
app = Flask(__name__)
app.secret_key = "secret_key_emr_insight_ai"
UPLOAD_FOLDER = 'static/uploads'
MODEL_DIR = 'models'
MODEL_FILENAME = 'best_weights_model.keras'
MODEL_PATH = os.path.join(MODEL_DIR, MODEL_FILENAME)
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'bmp'}

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(MODEL_DIR, exist_ok=True)

# --- KH·ªûI T·∫†O V√Ä LOAD MODEL ---

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def join_model_parts():
    """Ki·ªÉm tra v√† gh√©p c√°c ph·∫ßn model ƒë√£ chia nh·ªè th√†nh m·ªôt file duy nh·∫•t."""
    model_parts_pattern = os.path.join(MODEL_DIR, f"{MODEL_FILENAME}.part*")
    model_parts = sorted(glob.glob(model_parts_pattern))

    if not model_parts:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y ph·∫ßn n√†o c·ªßa model t·∫°i: {model_parts_pattern}")
        return False

    print(f"üîß ƒêang gh√©p {len(model_parts)} ph·∫ßn model...")
    try:
        with open(MODEL_PATH, "wb") as outfile:
            for part in model_parts:
                print(f"üß© Gh√©p: {part}")
                with open(part, "rb") as infile:
                    outfile.write(infile.read())
                # TH√äM: Bu·ªôc ghi d·ªØ li·ªáu xu·ªëng ƒëƒ©a (r·∫•t quan tr·ªçng tr√™n Windows)
                outfile.flush()
        print(f"‚úÖ Gh√©p model th√†nh c√¥ng: {MODEL_PATH}")
        return True
    except Exception as e:
        print(f"‚ùå L·ªói khi gh√©p model: {e}")
        return False

# C·∫ßn glob ·ªü ƒë√¢y
import glob
join_model_parts() 

model = None
is_dummy_model = False # Bi·∫øn ƒë·ªÉ theo d√µi n·∫øu ƒë√¢y l√† m√¥ h√¨nh gi·∫£ l·∫≠p
try:
    print(f"üî¨ ƒêang c·ªë g·∫Øng t·∫£i model t·ª´: {MODEL_PATH}")
    # Compile=False ƒë∆∞·ª£c s·ª≠ d·ª•ng v√¨ ch√∫ng ta ch·ªâ ƒëang load ƒë·ªÉ inference (d·ª± ƒëo√°n)
    model = load_model(MODEL_PATH, compile=False) 
    print("‚úÖ Model th·∫≠t ƒë√£ ƒë∆∞·ª£c load.")
    is_dummy_model = False
except Exception as e:
    # Ghi l·∫°i l·ªói chi ti·∫øt khi load model
    print("----------------------------------------------------------")
    print(f"‚ùå KH√îNG TH·ªÇ LOAD MODEL T·ª™ ƒê∆Ø·ªúNG D·∫™N: {MODEL_PATH}")
    print(f"Chi ti·∫øt l·ªói t·∫£i model (quan tr·ªçng): {e}")
    print("----------------------------------------------------------")
    
    # B∆Ø·ªöC KH·∫ÆC PH·ª§C: T·∫°o m·ªôt m√¥ h√¨nh gi·∫£ l·∫≠p (Dummy Model)
    print("‚ö†Ô∏è T·∫†O DUMMY MODEL ƒê·ªÇ ·ª®NG D·ª§NG TI·∫æP T·ª§C CH·∫†Y ·ªû CH·∫æ ƒê·ªò DEMO...")
    try:
        # C·∫•u h√¨nh Dummy Model: Input 224x224x3, tr·∫£ v·ªÅ 1 x√°c su·∫•t
        model = Sequential([
            Input(shape=(224, 224, 3)),
            Flatten(),
            Dense(1, activation='sigmoid')
        ])
        print("‚úÖ DUMMY Model ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.")
        is_dummy_model = True
    except Exception as dummy_e:
        print(f"‚ùå L·ªói khi t·∫°o Dummy Model: {dummy_e}")
        model = None
        is_dummy_model = False # V·∫´n kh√¥ng c√≥ model n√†o


def preprocess_image(image_file, target_size=(224, 224)):
    """Ti·ªÅn x·ª≠ l√Ω h√¨nh ·∫£nh cho model Keras."""
    # M·ªü ·∫£nh t·ª´ stream/file object
    img = Image.open(image_file).convert('RGB')
    img = img.resize(target_size)
    
    # Chuy·ªÉn ƒë·ªïi sang numpy array v√† chu·∫©n h√≥a (gi·∫£ ƒë·ªãnh model mong ƒë·ª£i gi√° tr·ªã 0-1)
    img_array = img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0) # Th√™m dimension batch
    
    # Chu·∫©n h√≥a n·∫øu model g·ªëc c·ªßa b·∫°n s·ª≠ d·ª•ng:
    # VD: img_array = img_array / 255.0 
    
    # TR·∫¢ V·ªÄ: Array s·∫µn s√†ng ƒë·ªÉ predict
    return img_array

# --- C√ÅC ROUTES KH√ÅC (GI·ªÆ NGUY√äN) ---

@app.route("/")
@app.route("/index")
def index():
    return render_template("index.html")

@app.route("/login", methods=["POST"])
def login():
    username = request.form.get("username")
    password = request.form.get("password")

    # Gi·∫£ l·∫≠p x√°c th·ª±c (B·∫†N N√äN THAY TH·∫æ B·∫∞NG FIREBASE HO·∫∂C DB TH·∫¨T)
    if username == "user_demo" and password == "123456":
        session['user'] = username
        flash("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!", "success")
        return redirect(url_for("dashboard"))
    else:
        flash("T√™n ng∆∞·ªùi d√πng ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.", "danger")
        return redirect(url_for("index"))

@app.route("/logout")
def logout():
    session.pop('user', None)
    flash("ƒê√£ ƒëƒÉng xu·∫•t.", "info")
    return redirect(url_for("index"))


# --- ROUTE CH√çNH C√ì CH·ªàNH S·ª¨A ---

@app.route("/dashboard")
def dashboard():
    if 'user' not in session:
        flash("Vui l√≤ng ƒëƒÉng nh·∫≠p.", "danger")
        return redirect(url_for("index"))
    
    # CH·ªàNH S·ª¨A: Truy·ªÅn is_dummy_model
    return render_template("dashboard.html", model_ready=(model is not None), is_dummy=is_dummy_model)


@app.route("/emr_prediction", methods=["GET", "POST"])
def emr_prediction():
    if 'user' not in session:
        flash("Vui l√≤ng ƒëƒÉng nh·∫≠p.", "danger")
        return redirect(url_for("index"))

    prediction = None
    filename = None
    image_b64 = None

    if request.method == "POST":
        if 'file' not in request.files:
            flash("Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn.", "danger")
            return redirect(request.url)

        file = request.files['file']
        if file.filename == '':
            flash("Vui l√≤ng ch·ªçn m·ªôt file h√¨nh ·∫£nh.", "danger")
            return redirect(request.url)

        if file and allowed_file(file.filename):
            try:
                # L∆∞u tr·ªØ file t·∫°m th·ªùi v√† x·ª≠ l√Ω
                filename = secure_filename(file.filename)
                
                # ƒê·ªçc n·ªôi dung file ƒë·ªÉ x·ª≠ l√Ω v√† t·∫°o Base64
                img_bytes = file.read()
                image_b64 = base64.b64encode(img_bytes).decode('utf-8')
                
                # --- X·ª≠ l√Ω D·ª± ƒëo√°n ---
                
                if model is None:
                    flash("Model ch∆∞a s·∫µn s√†ng. Vui l√≤ng ki·ªÉm tra log m√°y ch·ªß ƒë·ªÉ bi·∫øt chi ti·∫øt.", "danger")
                    # THAY ƒê·ªîI: Truy·ªÅn tr·∫°ng th√°i model_ready
                    return render_template("emr_prediction.html", prediction=prediction, filename=filename, image_b64=image_b64, model_ready=False)

                # 1. Ti·ªÅn x·ª≠ l√Ω ·∫£nh
                x = preprocess_image(io.BytesIO(img_bytes)) 
                
                # 2. D·ª± ƒëo√°n v·ªõi m√¥ h√¨nh (th·∫≠t ho·∫∑c gi·∫£ l·∫≠p)
                preds = model.predict(x)
                
                # Gi·∫£ s·ª≠ m√¥ h√¨nh tr·∫£ v·ªÅ x√°c su·∫•t nh·ªã ph√¢n (vd: Nodule)
                score = preds[0][0]
                
                # TH√äM: N·∫øu l√† dummy model, ghi ƒë√® x√°c su·∫•t th√†nh gi√° tr·ªã ng·∫´u nhi√™n
                if is_dummy_model:
                     # Ghi ƒë√® x√°c su·∫•t ng·∫´u nhi√™n ƒë·ªÉ m√¥ ph·ªèng t√≠nh demo
                     score = random.uniform(0.4, 0.6) 
                     # TH√äM: C·∫£nh b√°o flash message
                     flash("‚ö†Ô∏è K·∫øt qu·∫£ n√†y l√† t·ª´ **M√¥ h√¨nh Gi·∫£ l·∫≠p** (DEMO) do kh√¥ng t·∫£i ƒë∆∞·ª£c Model th·∫≠t. Vui l√≤ng ki·ªÉm tra file `best_weights_model.keras`.", "warning")

                # 3. Ph√¢n lo·∫°i v√† ƒë·ªãnh d·∫°ng k·∫øt qu·∫£
                THRESHOLD = 0.5
                if score >= THRESHOLD:
                    label = "Nodule (U/N·ªët)"
                    probability = score
                    advice = "Khuy·∫øn ngh·ªã: Ch·ª•p ·∫£nh th√™m ho·∫∑c tham kh·∫£o √Ω ki·∫øn chuy√™n gia ƒë·ªÉ x√°c nh·∫≠n."
                else:
                    label = "Non-nodule (Kh√¥ng ph·∫£i U)"
                    probability = 1.0 - score
                    advice = "Khuy·∫øn ngh·ªã: Theo d√µi ƒë·ªãnh k·ª≥, k·∫øt qu·∫£ d·ª± ƒëo√°n l√† l√†nh t√≠nh."

                prediction = {
                    "label": label,
                    "probability": f"{probability:.2%}",
                    "advice": advice
                }
                
                flash(f"D·ª± ƒëo√°n ho√†n t·∫•t: {label} - {probability:.2%}", "success")
                
            except Exception as e:
                print(f"‚ùå L·ªói trong qu√° tr√¨nh d·ª± ƒëo√°n: {e}")
                flash(f"L·ªói h·ªá th·ªëng trong qu√° tr√¨nh d·ª± ƒëo√°n: {e}", "danger")
                
        else:
            flash("ƒê·ªãnh d·∫°ng file kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n JPG, PNG, GIF, BMP.", "danger")

    # THAY ƒê·ªîI: Truy·ªÅn tr·∫°ng th√°i model_ready
    return render_template("emr_prediction.html", prediction=prediction, filename=filename, image_b64=image_b64, model_ready=(model is not None))

if __name__ == "__main__":
    app.run(debug=True)
